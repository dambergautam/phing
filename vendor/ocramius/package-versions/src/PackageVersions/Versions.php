<?php

namespace PackageVersions;

/**
 * This class is generated by ocramius/package-versions, specifically by
 * @see \PackageVersions\Installer
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
final class Versions
{
    const VERSIONS = array (
  'corgi-php/corgi-file' => '0.2.2@cf6892bccf47803589d9ce32f2bac1fa5c03fbc1',
  'doctrine/annotations' => 'v1.3.0@30e07cf03edc3cd3ef579d0dd4dd8c58250799a5',
  'doctrine/cache' => 'v1.6.1@b6f544a20f4807e81f7044d31e679ccbb1866dc3',
  'doctrine/collections' => 'v1.3.0@6c1e4eef75f310ea1b3e30945e9f06e652128b8a',
  'doctrine/common' => 'v2.6.1@a579557bc689580c19fee4e27487a67fe60defc0',
  'doctrine/dbal' => 'v2.5.5@9f8c05cd5225a320d56d4bfdb4772f10d045a0c9',
  'doctrine/inflector' => 'v1.1.0@90b2128806bfde671b6952ab8bea493942c1fdae',
  'doctrine/lexer' => 'v1.0.1@83893c552fd2045dd78aef794c31e694c37c0b8c',
  'doctrine/migrations' => '1.4.1@0d0ff5da10c5d30846da32060bd9e357abf70a05',
  'ocramius/package-versions' => '1.1.1@4b2bfc8128db95b533303942b0d5b332bffa07c6',
  'ocramius/proxy-manager' => '2.0.4@a55d08229f4f614bf335759ed0cf63378feeb2e6',
  'psr/log' => '1.0.2@4ebe3a8bf773a19edfe0a84b6585ba3d401b724d',
  'symfony/console' => 'v3.1.6@c99da1119ae61e15de0e4829196b9fba6f73d065',
  'symfony/debug' => 'v3.1.6@e2b3f74a67fc928adc3c1b9027f73e1bc01190a8',
  'symfony/polyfill-mbstring' => 'v1.2.0@dff51f72b0706335131b00a7f49606168c582594',
  'symfony/yaml' => 'v3.1.6@7ff51b06c6c3d5cc6686df69004a42c69df09e27',
  'zendframework/zend-code' => '3.1.0@2899c17f83a7207f2d7f53ec2f421204d3beea27',
  'zendframework/zend-eventmanager' => '3.0.1@5c80bdee0e952be112dcec0968bad770082c3a6e',
  '__root__' => 'dev-develop@34406ddc413b6ee047bcc96870d7a0ebd96afeab',
);

    private function __construct()
    {
    }

    /**
     * @throws \OutOfBoundsException if a version cannot be located
     */
    public static function getVersion(string $packageName) : string
    {
        if (! isset(self::VERSIONS[$packageName])) {
            throw new \OutOfBoundsException(
                'Required package "' . $packageName . '" is not installed: cannot detect its version'
            );
        }

        return self::VERSIONS[$packageName];
    }
}
